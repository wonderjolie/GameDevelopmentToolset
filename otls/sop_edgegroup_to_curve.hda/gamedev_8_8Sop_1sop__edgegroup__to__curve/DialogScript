# Dialog script for gamedev::sop_edgegroup_to_curve automatically generated

{
    name	gamedev::sop_edgegroup_to_curve
    script	gamedev::sop_edgegroup_to_curve
    label	"GameDev Edge Group To Curve"

    help {
	""
    }

    inputlabel	1	"Mesh to Extract"
    inputlabel	2	"Sub-Network Input #2"
    inputlabel	3	"Sub-Network Input #3"
    inputlabel	4	"Sub-Network Input #4"

    parm {
        name    "group"
        label   "Group"
        type    string
        default { "" }
        menutoggle {
            [ "def build_menu_from_group(groups, menu):" ]
            [ "    if len(groups):" ]
            [ "        menu.extend((\"-\", \"\"))" ]
            [ "        " ]
            [ "    for group in groups:" ]
            [ "        name = group.name()" ]
            [ "        menu.extend((name, name))" ]
            [ "    " ]
            [ "    return menu" ]
            [ "    " ]
            [ "sopnode = hou.pwd()" ]
            [ "# List of tokens/labels to return." ]
            [ "menu = []" ]
            [ "# Make sure there is an input node before asking for its geometry." ]
            [ "if sopnode.inputs():" ]
            [ "    # Optionally add in '*' for all groups." ]
            [ "    menu.extend((\"*\", \"*\"))" ]
            [ "    geo = sopnode.inputs()[0].geometry()" ]
            [ "    " ]
            [ "    menu = build_menu_from_group(geo.edgeGroups(), menu)" ]
            [ "        " ]
            [ "return menu" ]
            language python
        }
        parmtag { "autoscope" "0000000000000000" }
        parmtag { "script_action" "import soputils\nkwargs['geometrytype'] = (hou.geometryType.Primitives,hou.geometryType.Edges,)\nkwargs['inputindex'] = 0\nsoputils.selectGroupParm(kwargs)" }
        parmtag { "script_action_help" "Select geometry from an available viewport.\nShift-click to turn on Select Groups." }
        parmtag { "script_action_icon" "BUTTONS_reselect" }
    }
    parm {
        name    "connectends"
        label   "Connect End Points"
        type    toggle
        default { [ "on" hscript-expr ] }
        parmtag { "autoscope" "0000000000000000" }
    }
    groupsimple {
        name    "folder0"
        label   "Thickness"
        grouptag { "group_type" "simple" }

        parm {
            name    "add_polywire"
            label   "Enable"
            type    toggle
            default { "0" }
        }
        parm {
            name    "polywire_color"
            label   "Color"
            type    color4
            size    4
            default { "1" "0" "0" "1" }
            disablewhen "{ add_polywire == 0 }"
            range   { 0 1 }
        }
        parm {
            name    "poly_wire_thickness"
            label   "Thickness"
            type    float
            default { "0.1" }
            disablewhen "{ add_polywire == 0 }"
            range   { 0 10 }
        }
    }

}
