from PySide2 import QtWebEngineWidgets, QtWidgets
import urllib2
import os 
from math import sin, cos, sqrt, atan2, radians, pow
import time 
import platform
import ssl
# approximate radius of earth in km
R = 6371.0

    
def latlong_distance(lat_long_1, lat_long_2):
    lat1 = radians(lat_long_1[0])
    lon1 = radians(lat_long_1[1])
    lat2 = radians(lat_long_2[0])
    lon2 = radians(lat_long_2[1])

    dlon = lon2 - lon1
    dlat = lat2 - lat1

    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))

    distance = R * c
    return distance * 1000

def update(node):
    if hou.updateModeSetting() != hou.updateMode.Manual:
        launch_map(hidden=True)
        hou.session.mapbox_web.urlChanged.connect(url_changed)


def url_changed(new_url):

    url = (new_url.url())
    post_hash = url.split("#")

    if len(post_hash[1].split(",")) == 7:
        
        on_button(hou.session.mapbox_web, hou.session.mapbox_node)
        
def on_button(test, node):
    url = (test.url().toString())
    post_hash = url.split("#")
    if len(post_hash) == 1:
        return 

    lon, lat, zoom, ne_lat, ne_lon , sw_lat , sw_lon  = post_hash[1].split(",")
  
    node.parm("lat_lon_zoomx").set(float(lat))
    
    node.parm("lat_lon_zoomy").set(float(lon))
    
    node.parm("lat_lon_zoomz").set(float(zoom))
    
    node.parm("boundsx").set(float(ne_lat))
    node.parm("boundsy").set(float(ne_lon))
    node.parm("boundsz").set(float(sw_lat))
    node.parm("boundsw").set(float(sw_lon))
    
    distance = latlong_distance([float(ne_lat), float(sw_lon)], [float(sw_lat), float(sw_lon)])
    distance2 = latlong_distance([float(ne_lat), float(ne_lon)], [float(ne_lat), float(sw_lon)])

    node.parm("total_size").set(max(distance, distance2))
    refresh(node, force=True)   
    hou.session.mapbox_win.close()


def refresh(node, force=True):
    
    API_KEY = os.getenv("MAPBOX_API")
    if not API_KEY:
        API_KEY = node.parm("api_key").eval()

    lat = node.parm("lat_lon_zoomx").eval() 
    lon = node.parm("lat_lon_zoomy").eval()
    zoom = node.parm("lat_lon_zoomz").eval()
        
    if abs(lon) > 360: 
        lon = lon%360 
    
    if lon < -180: 
        lon = 360+lon

    node.parm("lat_lon_zoomy").set(lon)
    
    cache_lat = node.parm("cache_lat_lon_zoomx").eval()
    cache_lon = node.parm("cache_lat_lon_zoomy").eval()
    cache_zoom = node.parm("cache_lat_lon_zoomz").eval()
    

    if lat != cache_lat or lon != cache_lon or zoom != cache_zoom or force:
        
        node.parm("cache_lat_lon_zoomx").set(lat)
        node.parm("cache_lat_lon_zoomy").set(lon)
        node.parm("cache_lat_lon_zoomz").set(zoom)
        
        
        ne_lat = node.parm("boundsx").eval()
        ne_lon = node.parm("boundsy").eval()
        sw_lat = node.parm("boundsz").eval()
        sw_lon = node.parm("boundsw").eval()
        
        offset_lon = node.parm("offsetsx").eval()
        offset_lat = node.parm("offsetsy").eval()

        
        if offset_lat: 
            lat_distance = (ne_lat - sw_lat) * offset_lat
    
            lat += lat_distance         
            ne_lat += lat_distance
            sw_lat += lat_distance
        
        if offset_lon: 
            lon_distance = (ne_lon - sw_lon) * offset_lon
            lon += lon_distance
            ne_lon += lon_distance
            sw_lon += lon_distance
    
        terrain_url = "https://api.mapbox.com/v4/mapbox.terrain-rgb/" + str(lon) +"," + str(lat) + "," + str((zoom+1)) + "/1024x1024@2x.png?access_token=" + API_KEY
        #print("terrain url: %s" % terrain_url)
        color_url = "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/" + str(lon) + "," + str(lat) + "," + str((zoom)) + "/1024x1024@2x?access_token="+ API_KEY
        #print("color url: %s" % color_url)
        osm_url = "https://overpass-api.de/api/map?bbox=" + str(sw_lon) + "," + str(sw_lat) + "," + str(ne_lon) + "," + str(ne_lat)
        #print("osm url: %s" % osm_url)

        terrain_path = node.parm("download_path_height").eval()
        terrain_dir = os.path.dirname(terrain_path)
        if not os.path.exists(terrain_dir):
            os.makedirs(terrain_dir)
        
        color_path = node.parm("download_path_color").eval()
        color_dir = os.path.dirname(color_path)
        if not os.path.exists(color_dir):
            os.makedirs(color_dir)
        
            
        osm_path = node.parm("download_path_osm").eval()
        osm_dir = os.path.dirname(osm_path)
        if not os.path.exists(osm_dir):
            os.makedirs(osm_dir)

        
        #urllib2.urlretrieve(terrain, terrain_path, context=ssl._create_unverified_context())
        terrain_data = urllib2.urlopen(terrain_url, context=ssl._create_unverified_context())
        with open(terrain_path, 'wb') as output:
            output.write(terrain_data.read())
            output.close()
        #urllib2.urlretrieve(color_url, color_path, context=ssl._create_unverified_context())
        color_data = urllib2.urlopen(color_url, context=ssl._create_unverified_context())
        with open(color_path, 'wb') as output:
            output.write(color_data.read())
            output.close()
        #urllib2.urlretrieve(osm_url, osm_path, context=ssl._create_unverified_context())
        osm_data = urllib2.urlopen(osm_url, context=ssl._create_unverified_context())
        with open(osm_path, 'wb') as output:
            output.write(osm_data.read())
            output.close()
    
    node.node("cop2net1/input_file").parm("reload").pressButton()
    node.node("load_sat_image_as_color").parm("reload").pressButton()
    node.node('load_in_osm_data/read_in_map_data').cook(force=True)
   
    hou.hscript("glcache -c;") #refresh textures

def launch_map(hidden=False):

    node = hou.pwd()
    
    win = QtWidgets.QWidget()
    win.setWindowTitle('MapBox - Select Location')
    win.setMinimumSize(550, 580)
    win.setMaximumSize(550,580)
    layout = QtWidgets.QVBoxLayout()
    win.setLayout(layout)
    webview = QtWebEngineWidgets.QWebEngineView()
    lat = node.parm("lat_lon_zoomx").eval()
    lon = node.parm("lat_lon_zoomy").eval()
    zoom = node.parm("lat_lon_zoomz").eval()
    
    API_KEY = os.getenv("MAPBOX_API")
    if not API_KEY:
        API_KEY = node.parm("api_key").eval()
        
    url = os.environ["HOUDINI_USER_PREF_DIR"] + "/mapbox/mapbox_map.html?#" + str(lon) + "," + str(lat) + "," + str(zoom) + "," + API_KEY
    if platform.system() != "Windows":
        url = "file://" + url
        
    webview.setUrl(url)
    
    layout.addWidget(webview)
    
    button = QtWidgets.QPushButton("Download")
    button.clicked.connect(lambda: on_button(webview, node))
    layout.addWidget(button)
    
    hou.session.mapbox_win = win 
    hou.session.mapbox_web = webview 
    hou.session.mapbox_node = node
    
    if not hidden:
        win.show()
        